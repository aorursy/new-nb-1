# This Python 3 environment comes with many helpful analytics libraries installed

# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python

# For example, here's several helpful packages to load in 



import numpy as np # linear algebra

import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import seaborn as sns

import matplotlib.pyplot as plt

# Input data files are available in the "../input/" directory.

# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory



import os

print(os.listdir("../input"))



# Any results you write to the current directory are saved as output.
dtypes = {

        'MachineIdentifier':                                    'category',

        'ProductName':                                          'category',

        'EngineVersion':                                        'category',

        'AppVersion':                                           'category',

        'AvSigVersion':                                         'category',

        'IsBeta':                                               'int8',

        'RtpStateBitfield':                                     'float16',

        'IsSxsPassiveMode':                                     'int8',

        'DefaultBrowsersIdentifier':                            'float32',

        'AVProductStatesIdentifier':                            'float32',

        'AVProductsInstalled':                                  'float16',

        'AVProductsEnabled':                                    'float16',

        'HasTpm':                                               'int8',

        'CountryIdentifier':                                    'int16',

        'CityIdentifier':                                       'float32',

        'OrganizationIdentifier':                               'float16',

        'GeoNameIdentifier':                                    'float16',

        'LocaleEnglishNameIdentifier':                          'int16',

        'Platform':                                             'category',

        'Processor':                                            'category',

        'OsVer':                                                'category',

        'OsBuild':                                              'int16',

        'OsSuite':                                              'int16',

        'OsPlatformSubRelease':                                 'category',

        'OsBuildLab':                                           'category',

        'SkuEdition':                                           'category',

        'IsProtected':                                          'float16',

        'AutoSampleOptIn':                                      'int8',

        'PuaMode':                                              'category',

        'SMode':                                                'float16',

        'IeVerIdentifier':                                      'float16',

        'SmartScreen':                                          'category',

        'Firewall':                                             'float16',

        'UacLuaenable':                                         'float64',

        'Census_MDC2FormFactor':                                'category',

        'Census_DeviceFamily':                                  'category',

        'Census_OEMNameIdentifier':                             'float32', 

        'Census_OEMModelIdentifier':                            'float32',

        'Census_ProcessorCoreCount':                            'float16',

        'Census_ProcessorManufacturerIdentifier':               'float16',

        'Census_ProcessorModelIdentifier':                      'float32', 

        'Census_ProcessorClass':                                'category',

        'Census_PrimaryDiskTotalCapacity':                      'float64', 

        'Census_PrimaryDiskTypeName':                           'category',

        'Census_SystemVolumeTotalCapacity':                     'float64', 

        'Census_HasOpticalDiskDrive':                           'int8',

        'Census_TotalPhysicalRAM':                              'float32',

        'Census_ChassisTypeName':                               'category',

        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32', 

        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32', 

        'Census_InternalPrimaryDisplayResolutionVertical':      'float32', 

        'Census_PowerPlatformRoleName':                         'category',

        'Census_InternalBatteryType':                           'category',

        'Census_InternalBatteryNumberOfCharges':                'float64', 

        'Census_OSVersion':                                     'category',

        'Census_OSArchitecture':                                'category',

        'Census_OSBranch':                                      'category',

        'Census_OSBuildNumber':                                 'int16',

        'Census_OSBuildRevision':                               'int32',

        'Census_OSEdition':                                     'category',

        'Census_OSSkuName':                                     'category',

        'Census_OSInstallTypeName':                             'category',

        'Census_OSInstallLanguageIdentifier':                   'float16',

        'Census_OSUILocaleIdentifier':                          'int16',

        'Census_OSWUAutoUpdateOptionsName':                     'category',

        'Census_IsPortableOperatingSystem':                     'int8',

        'Census_GenuineStateName':                              'category',

        'Census_ActivationChannel':                             'category',

        'Census_IsFlightingInternal':                           'float16',

        'Census_IsFlightsDisabled':                             'float16',

        'Census_FlightRing':                                    'category',

        'Census_ThresholdOptIn':                                'float16',

        'Census_FirmwareManufacturerIdentifier':                'float16',

        'Census_FirmwareVersionIdentifier':                     'float32',

        'Census_IsSecureBootEnabled':                           'int8',

        'Census_IsWIMBootEnabled':                              'float16',

        'Census_IsVirtualDevice':                               'float16',

        'Census_IsTouchEnabled':                                'int8',

        'Census_IsPenCapable':                                  'int8',

        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',

        'Wdft_IsGamer':                                         'float16',

        'Wdft_RegionIdentifier':                                'float16',

        'HasDetections':                                        'int8'

        }
train_df = pd.read_csv('../input/train.csv',dtype=dtypes)

train_df.head()
train_df.info()
len(train_df.columns)
# Let's check the columns which contains the null values

null_columns = train_df.isnull().sum()

null_columns[null_columns > 0].sort_values()
len(null_columns[null_columns > 0])
# Columns which do not contain any null values

non_null_columns = null_columns[null_columns == 0]

non_null_columns
1- (44/83)
train_df.columns
train_df.MachineIdentifier.unique()
train_df.drop(columns=['MachineIdentifier'],axis=1,inplace=True)

train_df
train_df.ProductName.unique()
train_df[train_df.HasDetections == 1].pivot_table('HasDetections',index='ProductName',columns='IsBeta',aggfunc='count').fillna(0)
train_df[train_df.HasDetections == 0].pivot_table('HasDetections',index='ProductName',columns='IsBeta',aggfunc='count').fillna(0)
train_df.EngineVersion.unique()
# Top 10 Popular EngineVersions of win8Defender

train_df[train_df.ProductName == 'win8defender'].EngineVersion.value_counts().nlargest(10)
train_df.IsProtected = train_df.IsProtected.fillna(2.0)

# Here 2 means NO AVP Installed
by_protection = train_df[train_df.ProductName == 'win8defender'].groupby(['IsProtected','EngineVersion','HasDetections']).size().unstack()
fig,ax = plt.subplots(3,1,figsize=(12,15))

for i in range(3):

    frame = by_protection.loc[i]

    frame = frame[frame.index.isin(frame.sum(1).nlargest(10).index)].sort_index()

    frame = frame.div(frame.sum(1),axis=0)

    frame.plot(kind='barh',ax=ax[i])

    

ax[0].set_title('Total top 10 Not Protected Machines by popular versions of Win8Defender')

ax[1].set_title('Total top 10 Protected Machines by popular versions of Win8Defender')

ax[2].set_title('Total top 10 Without any AVP Machines by popular versions of Win8Defender')

plt.subplots_adjust(hspace=0.45)
train_df.Firewall.value_counts()
train_df[train_df.ProductName == 'win8defender'].groupby(['Firewall','HasDetections']).size().unstack()
# Machines running OS ver Windows 8.1 or above & win8defender 

win8devices_abv = train_df[(train_df.ProductName == 'win8defender') & (train_df.Firewall == 1)]
win8devices_abv.shape
win8devices_abv.Census_DeviceFamily.value_counts()
by_devicefamily = win8devices_abv.groupby(['Census_DeviceFamily','HasDetections']).size().unstack()
by_devicefamily = by_devicefamily.div(by_devicefamily.sum(1),axis=0)
fig,ax = plt.subplots(1,1,figsize=(8,5))

by_devicefamily.plot(ax=ax,kind='barh',title='Machines Prone to malwares by Device Family ')
win8devices_abv.SmartScreen.value_counts()
win8devices_abv.SmartScreen = win8devices_abv.SmartScreen.replace({'requireadmin':'RequireAdmin','OFF':'off',

                                   'on':'On','prompt':'Prompt','Promt':'Prompt',

                                   '0':'off','Enabled':'On','requireAdmin':'RequireAdmin',

                                    'warn':'Warn','Off':'off'})

win8devices_abv.SmartScreen.value_counts()
SmartSGrp = win8devices_abv.groupby(['Census_DeviceFamily','SmartScreen','HasDetections']).size().unstack().fillna(0)
subSG = SmartSGrp.loc['Windows.Desktop'].iloc[4:].fillna(0)
fig,ax = plt.subplots(1,1,figsize=(12,6))

subSG.div(subSG.sum(1),axis=0).plot(kind='barh',ax=ax,colormap='PiYG',

                                    title='Windows Desktop devices Malware Conditions by SmartScreen status')
subSG = SmartSGrp.loc['Windows.Server'].iloc[1:]
fig,ax = plt.subplots(1,1,figsize=(12,6))

subSG.div(subSG.sum(1),axis=0).plot(kind='barh',ax=ax,colormap='plasma',

                                    title='Windows Server devices Malware Conditions by SmartScreen status')
train_df[train_df.ProductName == 'win8defender'].Census_IsSecureBootEnabled.value_counts()
subSG = train_df[train_df.ProductName == 'win8defender'].groupby(['Census_IsSecureBootEnabled'

                                                          ,'Census_IsTouchEnabled','HasDetections']).size().unstack()
def pct_converter(df):

    return df.div(df.sum(1),axis=0)
train_df[train_df.ProductName == 'win8defender'].groupby(['Census_IsSecureBootEnabled',

                                                         'HasDetections']).size().unstack()
fig,ax = plt.subplots(1,1,figsize=(12,7))

pct_converter(subSG).plot(kind='barh',ax=ax)